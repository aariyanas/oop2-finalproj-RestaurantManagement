@page "/menu"
@using RestaurantManagement.Data
@inject IJSRuntime JSRuntime
@using Microsoft.Data.SqlClient
@inject MenuDB MenuDb

<div class="menu">
    <h3>Menu Items</h3>
    @if (menuList == null || !menuList.Any())
    {
        <p>No menu items found</p>
    }
    else
    {
        @foreach (var categoryGroup in menuList.GroupBy(item => item.Category).OrderBy(group => GetCategoryOrder(group.Key)))
        {
            <h5>@categoryGroup.Key</h5>
            <table class="menu-items">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Price</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in categoryGroup)
                    {
                        <tr>
                            <td>@item.Name</td>
                            <td>
                                @if (item == editingItem)
                                {
                                    <input @bind="editingPrice" class="menu-items-input" />
                                }
                                else
                                {
                                    @item.Price.ToString("F2")
                                }
                            </td>
                            <td>
                                @if (item == editingItem)
                                {
                                    <button @onclick="() => SaveEdit(item)">Save</button>
                                    <button @onclick="CancelEdit">Cancel</button>
                                }
                                else
                                {
                                    <button @onclick="() => EditItem(item)">Edit</button>
                                    <button @onclick="@(async () => await ConfirmDelete(item))">Delete</button>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    }
</div>

<div class="add-menu-item">
    <h4>Add New Menu Item</h4>
    <input @bind="name" placeholder="Name" />
    <input @bind="price" placeholder="Price" />
    <input @bind="category" placeholder="Category" />
    <button @onclick="AddMenuItem">Add</button>
</div>

@code {
    private string name = string.Empty;
    private string price = string.Empty;
    private string category = string.Empty;
    private Menu editingItem = null;
    private string editingPrice = string.Empty;
    private List<Menu> menuList = new List<Menu>();

    protected override async Task OnInitializedAsync()
    {
        await LoadMenu();
    }

    private async Task LoadMenu()
    {
        menuList = (await MenuDb.GetMenu()).OrderBy(item => item.Price).ToList();
    }

    private async Task AddMenuItem()
    {
        string connectString = "Server=(localdb)\\mssqllocaldb;Database=RestaurantManagement;Trusted_Connection=True;MultipleActiveResultSets=true";
        SqlConnection connect = new SqlConnection(connectString);

        connect.Open();
        if (!string.IsNullOrWhiteSpace(name) && !string.IsNullOrWhiteSpace(price) && !string.IsNullOrWhiteSpace(category))
        {
            var newItem = new Menu
                {
                    Name = ToPascalCase(name),
                    Price = double.Parse(price),
                    Category = ToPascalCase(category)
                };
            await MenuDb.AddMenuItem(newItem);
            await LoadMenu();

            name = string.Empty;
            price = string.Empty;
            category = string.Empty;
        }
    }

    private void EditItem(Menu item)
    {
        editingItem = item;
        editingPrice = item.Price.ToString("F2");
    }

    private void CancelEdit()
    {
        editingItem = null;
        editingPrice = string.Empty;
    }

    private async Task SaveEdit(Menu item)
    {
        if (double.TryParse(editingPrice, out double newPrice))
        {
            item.Price = newPrice;
            await MenuDb.DeleteMenuItem(item);
            await MenuDb.AddMenuItem(item);
            await LoadMenu();
            CancelEdit();
        }
    }

    private async Task ConfirmDelete(Menu item)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Are you sure you want to delete this item?" });
        if (confirmed)
        {
            await DeleteMenuItem(item);
        }
    }

    private async Task DeleteMenuItem(Menu item)
    {
        await MenuDb.DeleteMenuItem(item);
        await LoadMenu();
    }

    private string ToPascalCase(string input)
    {
        if (string.IsNullOrWhiteSpace(input))
            return input;

        var words = input.ToLower().Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
        var result = string.Join(" ", words.Select(word => char.ToUpper(word[0]) + word.Substring(1)));
        return result;
    }

    private int GetCategoryOrder(string category)
    {
        var categoryOrder = new List<string> { "Burger", "Sides", "Drinks", "Dessert" };

        return categoryOrder.IndexOf(category) != -1 ? categoryOrder.IndexOf(category) : int.MaxValue;
    }
}


