@page "/weather"
@using RestaurantManagement.Data
@inject IJSRuntime JSRuntime

<div class="inventory">
    <h4>Current Inventory Items</h4>
    @if (inventoryList == null || !inventoryList.Any())
    {
        <p>No inventory items found</p>
    }
    else
    {
        @foreach (var categoryGroup in inventoryList.GroupBy(item => item.Category))
        {
            <h5>@categoryGroup.Key</h5>
            <table class="inventory-items">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Quantity</th>
                        <th>Price</th>
                        <th>Order</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in categoryGroup)
                    {
                        <tr>
                            <td>@item.Name</td>
                            <td>@item.Quantity</td>
                            <td>@item.Price</td>
                            <td>
                                <input type="number" min="0" step="10" @bind="item.QuantityToOrder" />
                            </td>
                            <td>
                                <button class="order-button" @onclick="@(async () => await ConfirmOrder(item))">Order</button>
                                <button class="delete-button" @onclick="@(async () => await ConfirmDelete(item))">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    }
</div>

@code {
    List<Inventory> inventoryList = InventoryManager.inventoryInfo;

    private async Task ConfirmOrder(Inventory item)
    {
        var quantityToAdd = item.QuantityToOrder;
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { $"Are you sure you want to order {quantityToAdd} units of {item.Name}?" });
        if (confirmed)
        {
            InventoryManager.OrderInventory(item.Name, quantityToAdd);
            inventoryList = InventoryManager.inventoryInfo;
        }
    }

    private async Task ConfirmDelete(Inventory item)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Are you sure you want to delete this item?" });
        if (confirmed)
        {
            InventoryManager.DeleteInventoryItem(item);
            inventoryList = InventoryManager.inventoryInfo;
        }
    }
}

